/* 1. TO create an empty git repository
2. The git init command creates a new Git repository.
3. You only use git init if you already have code and you want to put it in a new Git repository. */

>> git init

/* command to say what changes are made to a project which is being tracked by git*/

>> git status

/* 1. git add command adds a change in the working directory to the staging area.
2. It tells Git that you want to include updates to a particular file in the next commit.*/

>> git add . (  Stage all (new, modified, deleted) files in current folder )

>> git add -A ( Stage all (new, modified, deleted) files )

>> git add -u ( Stage modified and deleted files only )

>> git add --ignore-removal . ( Stage new/modified files in the current directory and ignores deleted files )

/* 1. The git commit command captures a snapshot of the project's currently staged changes
2. Committed snapshots can be thought of as “safe” versions of a project
3. Git will never change them unless you explicitly ask it to */

>> git commit -m "git commands txt file"

/* undo staged files before commit can be done by the following command*/

>> git restore --staged <name_of_file>

/* history of commits can be seen */
>> git log

/* git add and commit same time*/

>> git commit -am "git commands txt file modified"

/* git stash and git stash pop 
1. git stash is used whatever the changes are added before commit and can be moved to back stage so that worktree looks clean without any chnages to commit
2. whenever we want back those changes we use git stash pop
3. whenever we feel back stage changes are not important to add then we use git stash clear
*/

>> git stash

>> git stash pop

>> git stash clear

/* when we need to add remote url repository, origin says name of url to be added */
>> git remote add origin https://github.com/revanthpalla/GIT_BASICS_DECODING.git

/* still changes are not reflected in remote repo in git*/
>> git push origin <branch_name> --> git push origin master